package cn.javaex.mybatisjj.config.interceptor;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;
import java.util.Properties;

import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.SqlCommandType;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;

import cn.javaex.mybatisjj.basic.common.IdTypeConstant;
import cn.javaex.mybatisjj.entity.TableIdEntity;
import cn.javaex.mybatisjj.provider.EntityProvider;

/**
 * 插入/更新拦截器
 * 
 * @author 陈霓清
 */
@Intercepts({
	@Signature(type = Executor.class, method = "update", args = { MappedStatement.class, Object.class })
})
public class SaveEntityInterceptor extends EntityProvider implements Interceptor {

	private Optional<BeforeSaveEntityInterceptor> beforeSaveEntityInterceptor;
	
	public SaveEntityInterceptor(Optional<BeforeSaveEntityInterceptor> beforeSaveEntityInterceptor) {
		this.beforeSaveEntityInterceptor = beforeSaveEntityInterceptor;
	}

	@Override
	public Object intercept(Invocation invocation) throws Throwable {
		// 获取方法参数
		Object[] args = invocation.getArgs();
		MappedStatement ms = (MappedStatement) args[0];
		// 获取SQL命令类型
		SqlCommandType commandType = ms.getSqlCommandType();
		
		Object parameter = args[1];
		if (parameter == null) {
			return invocation.proceed();
		}
		Class<?> clazz = parameter.getClass();
		
		// 封装的主键实体
		Object generatedKeyResult = null;
		// 插入前或更新前的逻辑
		// insert
		if (SqlCommandType.INSERT.equals(commandType)) {
			if (beforeSaveEntityInterceptor.isPresent()) {
				beforeSaveEntityInterceptor.ifPresent(interceptor -> interceptor.insertFill(parameter));
			}
			
			// 主键生成策略
			generatedKeyResult = super.autoGeneratedKey(parameter);
		}
		// update
		else if (SqlCommandType.UPDATE.equals(commandType)) {
			if (beforeSaveEntityInterceptor.isPresent()) {
				beforeSaveEntityInterceptor.ifPresent(interceptor -> interceptor.updateFill(parameter));
			}
		}

		// 继续执行
		Object result = invocation.proceed();

		// 获取刚插入记录的自增主键值（只有单条数据插入时才获取）
		if (SqlCommandType.INSERT.equals(commandType) && generatedKeyResult!=null && generatedKeyResult instanceof TableIdEntity) {
			TableIdEntity tableIdEntity = (TableIdEntity) generatedKeyResult;
			
			if (tableIdEntity!=null && IdTypeConstant.AUTO.equals(tableIdEntity.getIdType())) {
				// 判断影响的行数
				int affectedRows = (Integer) result;
				if (affectedRows > 0) {
					// 获取执行器
					Executor executor = (Executor) invocation.getTarget();
					// 获取JDBC Connection
					Connection connection = executor.getTransaction().getConnection();
					// 执行 SELECT LAST_INSERT_ID() 来获取自动生成的主键值
					try (PreparedStatement ps = connection.prepareStatement("SELECT LAST_INSERT_ID()")) {
						try (ResultSet rs = ps.executeQuery()) {
							if (rs.next()) {
								// 获取生成的主键值
								Object generatedKey = rs.getObject(1);
								
								// 反射设置参数对象的ID属性
								Field idField = clazz.getDeclaredField(tableIdEntity.getField());
								idField.setAccessible(true);
								
								// 根据字段类型来进行适当的类型转换
								Class<?> fieldType = idField.getType();
								
								if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
									idField.set(parameter, ((Number) generatedKey).longValue());
								}
								else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
									idField.set(parameter, ((Number) generatedKey).intValue());
								}
								else if (fieldType.equals(String.class)) {
									idField.set(parameter, generatedKey.toString());
								}
								else {
									// 抛出一个异常或者使用其他默认行为
									throw new IllegalArgumentException("Unsupported primary key type: " + fieldType);
								}
								
								idField.setAccessible(false);
							}
						}
					} catch (SQLException | NoSuchFieldException | IllegalAccessException e) {
						throw new Throwable("Failed to retrieve autogenerate key", e);
					}
				}
			}
		}
		
		return result;
	}

	@Override
	public Object plugin(Object target) {
		return Plugin.wrap(target, this);
	}

	@Override
	public void setProperties(Properties properties) {
		// 如有需要，这里可以配置属性
	}
}
